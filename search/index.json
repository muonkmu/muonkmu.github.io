[{"content":"목표 개인 기술 정리를 위한 블로그의 생성 markdown 사용이 편리한 github.io를 이용하기로 결정 빌드가 빠른 HUGO framework을 사용(github에서는 Jekyll framework가 기본이나 컨텐츠가 쌓이면 빌드가 느려지는 단점이 있음) Hugo theme는 STACK을 사용 개발 환경 Oracle Cloud Arm server Ubuntu 20.40 code-server 사전 준비 GO 설치 Hugo는 GO로 작성되 있으므로 GO를 설치한다.\nref : https://go.dev/doc/install 필요 시 GO의 설치 경로를 PATH에 등록한다. Hugo 설치 리눅스의 경우 패키지 관리자를 이용하여 설치가 가능하나 이 경우 old 버전이 설치된다. STACK 테마의 경우 최신버전과 hugo extension이 필요하므로 Go를 이용하여 설치한다. https://gohugo.io/installation/linux/ 1 go install -tags extended github.com/gohugoio/hugo@latest 필요 시 Hugo의 설치 경로를 PATH에 등록한다. git repo 생성 hosting을 위한 repo를 생성한다. repo의 이름은 {git ID}.github.io 형식 ex) muonkmu.github.io 호스팅 목적이므로 repo는 public hugo 빌드 전 소스를 보관할 repo를 생성한다. 이름은 상관 없음 ex) blog 소스 보관용이므로 public/private은 개인 취향 블로그 작성 및 배포 hugo 프로젝트 생성 및 테마 설정 프로젝트를 생성 후 폴더 이동, 하기 예제의 이름은 hugoBlog로 가정 1 2 hugo new site hugoBlog cd hugoBlog git 초기화 및 테마 설정 하기 예제에서는 Stack 테마 사용 clone으로 테마 소스를 themes폴더에 넣을 수도 있으나 submodule을 추천 1 2 git init git submodule add https://github.com/CaiJimmy/hugo-theme-stack.git themes/hugo-theme-stack config파일 설정 config.toml을 수정, 하기 예제에서는 stack 테마의 예제 파일을 복사/수정 한다. config.yaml의 baseurl, theme, title 등을 수정한다. 1 2 3 rm config.toml cp themes/hugo-theme-stack/exampleSite/config.yaml ./ cp themes/hugo-theme-stack/exampleSite/content ./ 1 2 3 4 5 baseurl: https://muonkmu.github.io/ languageCode: en-us theme: hugo-theme-stack paginate: 7 title: MW Devlog 컨텐츠 작성 및 테스트 categories, post, page 등을 작성한다. 하기 예제에서는 stack 테마의 예제 파일을 복사/수정 한다. content/post 내 예제 파일을 참조하여 post를 작성한다(예제포스트는 지워도 된다.) 1 2 rm -r content cp themes/hugo-theme-stack/exampleSite/content ./ 테스트 서버를 구동하여 동작을 확인한다. 하기 예제에는 orcle 서버에서 개발하는 것을 가정, 내부 바인딩과 포트를 별도로 할당였다(오라클 서버에서 방화벽에 우선적으로 포트을 열어둬야 함) 웹 브라우저로 테스트 서버에 접속해 동작을 확인한다. 1 hugo server -D --bind=0.0.0.0 -p 8070 빌드 및 배포 github repo를 연결한다. 소스 repo에 프로젝트 폴더를 연결 host repo에 public 폴더를 연결 1 2 3 git remote add origin https://github.com/muonkmu/blog.git rm -r public git submodule add -b master https://github.com/muonkmu/muonkmu.github.io.git public 소스를 빌드한다. 하기 예제에서는 stack 테마의 사용 경우이다. 1 hugo -t hugo-theme-stack 빌드 및 소스 파일을 push 한다. 1 2 3 4 5 6 7 8 9 10 cd public git add . git commit -m \u0026#34;first commit\u0026#34; git branch -M main git push origin main cd .. git add . git commit -m \u0026#34;first commit\u0026#34; git branch -M main git push origin main (option)배포에 시 사용할 쉘 스크립트를 작성한다. ex)deploy.sh 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 #!/bin/bash hugo -t hugo-theme-stack cd public git add . msg=\u0026#34;rebuilding site `date`\u0026#34; if [ $# -eq 1 ] then msg=\u0026#34;$1\u0026#34; fi git commit -m \u0026#34;$msg\u0026#34; git push origin main cd .. git add . msg=\u0026#34;rebuilding site `date`\u0026#34; if [ $# -eq 1 ] then msg=\u0026#34;$1\u0026#34; fi git commit -m \u0026#34;$msg\u0026#34; git push origin main ","date":"2022-12-13T00:00:00Z","permalink":"https://muonkmu.github.io/p/github-blog-%EB%A7%8C%EB%93%A4%EA%B8%B0/","title":"Github blog 만들기"},{"content":"TEST Test ","date":"2022-12-12T00:00:00Z","permalink":"https://muonkmu.github.io/p/cs231n-chap-02/","title":"CS231n Chap 02"},{"content":"목적 Ubuntu 20.04 LTS 설치 후 나에게 맞는 설정 및 설정 방법 정리 유의사항 설치 시 언어는 영어, 키보드 영어 자판으로 설치를 권장 개인 설정 Nvidia 그래픽 카드 설정 설치 가능한 드라이버 확인 1 ubuntu-drivers devices 권장 드라이버 설치 1 sudo ubuntu-drivers autoinstall 한영키 동작 설정 입력기 설치 : setting → Region and Language → Input Source → Korean(Hangul) 추가 1항의 추가된 항목 설정에서 Hangul Toggle Key를 Hangul만 남김(option) /usr/share/X11/xkb/symbols/altwin 편집 4행의 key \u0026lt;RALT\u0026gt; ... 부분에서 symbols[Gropu1] = [ Alt_R, Meta_R ] 부분을 [ Hangul ] 로 수정한다. VNC 설치 tigerVNC 설치 1 sudo apt-get install tigervnc-standalone-server tigervnc-xorg-extension 비밀번호 설정 1 vncpasswd ~/.vnc/xstartup 작성 1 2 3 4 5 6 #!/bin/sh # Start Gnome 3 Desktop [ -x /etc/vnc/xstartup ] \u0026amp;\u0026amp; exec /etc/vnc/xstartup [ -r $HOME/.Xresources ] \u0026amp;\u0026amp; xrdb $HOME/.Xresources vncconfig -iconic \u0026amp; dbus-launch --exit-with-session gnome-session \u0026amp; vnc 서버 실행 1 vncserver -localhost no vnc 서버 종료 1 vncserver -kill :2 설정변경 : $\u0026gt;sudo vim /etc/vnc.conf 1 2 $geometry = \u0026#34;1920x1080\u0026#34;; $depth = \u0026#34;16\u0026#34;; SSH 설치 서버 설치 1 sudo apt install openssh-server 실행여부 확인 1 sudo systemctl status ssh 서버 실행 1 2 sudo systemctl enable ssh sudo systemctl start ssh xforward 설정 팡일의 /etc/ssh/ssh_config 의 x11Forward no → x11Forward yes로 변경 ssh서버 재실행 및 클라언트 실행 시 -X 옵션 추가 ZSH/om-my-zsh 설치 및 설정 zsh 설치 1 sudo apt-get install zsh 설치확인 1 cat /etc/shells 기본쉘 변경 1 chsh -s $(which zsh) oh-my-zsh 설치(curl설치필요) 1 sh -c \u0026#34;$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)\u0026#34; 테마변경 ~/.zshrc 파일 내 ZSH_THEME=\u0026quot;agnoster\u0026quot; 로 변경 글자깨질 시 Powerline폰트 설치 1 sudo apt-get install fonts-powerline 커맨드라인 컴퓨터 이름 감추기 ~/.zshrc 하단에 하기 내용 추가 1 2 3 4 5 prompt_context() { if [[ \u0026#34;$USER\u0026#34; != \u0026#34;$DEFAULT_USER\u0026#34; || -n \u0026#34;$SSH_CLIENT\u0026#34; ]]; then prompt_segment black default \u0026#34;%(!.%{%F{yellow}%}.)$USER\u0026#34; fi } zsh-autosuggestions 플러그인 설치 1 git clone https://github.com/zsh-users/zsh-autosuggestions.git $ZSH_CUSTOM/plugins/zsh-autosuggestions zsh-syntax-highlighting 플러그인 설치 1 git clone https://github.com/zsh-users/zsh-syntax-highlighting.git $ZSH_CUSTOM/plugins/zsh-syntax-highlighting autojump 설치 1 2 3 git clone https://github.com/wting/autojump.git cd autojump ./install.py 사용법 j [디렉토리 명] 또는 j -s 플러그인 활성화\n~/.zshrc 파일 내 plugins=(git zsh-autosuggestions zsh-syntax-highlighting autojump) 로 변경 줄바꿈 적용(멀티라인 입력)\n~/.oh-my-zsh/themes/agnoster.zsh-theme파일 수정 prompt_hg 하단에 prompt_newline 추가 후 파일 최하단 하기 프롬프트 추가 1 2 3 4 5 6 7 8 9 10 prompt_newline() { if [[ -n $CURRENT_BG ]]; then echo -n \u0026#34;%{%k%F{$CURRENT_BG}%}$SEGMENT_SEPARATOR %{%k%F{blue}%}$SEGMENT_SEPARATOR\u0026#34; else echo -n \u0026#34;%{%k%}\u0026#34; fi echo -n \u0026#34;%{%f%}\u0026#34; CURRENT_BG=\u0026#39;\u0026#39; } ","date":"2022-12-12T00:00:00Z","permalink":"https://muonkmu.github.io/p/ubuntu-20.04-%EA%B0%9C%EC%9D%B8-%ED%99%98%EA%B2%BD-%EC%84%A4%EC%A0%95/","title":"Ubuntu 20.04 개인 환경 설정"},{"content":"목적 클라우드 서버를 이용하여 원격으로 접속 가능한 개발 서버의 구축 최종 목표 고정 IP를 가진 ubuntu 서버 무료 클라우드 서버 중 오라클이 ARM64-4core/24GB ram/200GB storage VM 머신 제공 (타사 대비 월등히 좋음) 원격 개발을 위한 code-server 설치 서버 구축 클라우드 서버 구축 오라클 클라우드 Free tier 가입 리전은 원하는 곳(춘천이 빠르고 ARM 서버 리소스가 남음) 카드 정보를 기입(실제로 결제가 되지는 않음) 가입 완료 후 하단의 Create a VM instance 시작 instance Name 입력 image는 원하는거 선택, ex) canonical Ubuntu 20.04 shape는 Ampere 선택 core는 4, memory는 24GB 까지 무료 상기 리소스를 나누어 무료 VM를 생성할 수 있다.ex) 2core-12GB 인스턴스 2개 무료 VCN이 없다면 페이지에서 VCN을 생성하여 연결 본인의 PC에서 SSH를 생성하여 Public키를 업로드 한다. http://taewan.kim/oci_docs/98_misc_tips/ssh_key_pairs/ 부트 볼륨 생성 Specify a custom boot volume size을 클릭 후 원하는 볼륨생성 200GB까지 무료이며 상기 리소스를 나누어 무료 VM생성 가능 Create로 생성 해당 리전의 리소스가 부족하여 생성이 안되는 경우가 있다. 상기의 경우 리소스가 풀릴 때 까지 기다리거나 유료계정으로 업그레이드 (승인되는데 시간 걸림) 유료 계정이 되더라도 무료 리소스까지만 쓰면 과금이 되지 않는다. 클라우드 서버 환경 설정 고정 IP 설정 Compute \u0026gt; Instances \u0026gt; Instance Details \u0026gt; Attached VNICs \u0026gt; VNIC Details \u0026gt; IPv4 Addresses 상기 경로에서 NO PUBLIC IP 선택하여 IP 삭제 후 RESERVED PUBLIC IP로 변경 우분터 사용자 계정 생성(option) ssh 로그인 현재 계정 ubuntu 암호 생성 사용자 계정 생성 생성 계정에 sudo 권한 부여 계정 변경 ssh 비번으로 접속 설정 /etc/ssh/sshd_config파일의 PasswordAuthentication 값을 \u0026ldquo;yes\u0026quot;로 변경 클라우드 포트 개방 Networking \u0026gt; Virtual Cloud Networks \u0026gt; {사용중인 VNC} \u0026gt; Security List Details 상기 경로에서 포트 개방 추가 우분투 방화벽 포트 개방 1 sudo iptables -I INPUT 5 -p tcp --dport 8070 -m state --state NEW,ESTABLISHED -j ACCEPT code-server 설치 code-server 다운로드 및 설치 https://coder.com/docs/code-server/latest/install 1 curl -fsSL https://code-server.dev/install.sh | sh 서비스로 실행하기 위해 systemctl로 enable 1 sudo systemctl enable --now code-server@$USER 외부 접속을 위해 .config/code-server/config.yaml파일을 수정한다. 1 2 3 4 bind-addr: 0.0.0.0:{포트번호} auth: password password: {비밀번호} cert: false 서비스를 재시작 후 동작을 확인한다. 1 2 sudo systemctl restart --now code-server@$USER sudo systemctl status code-server@$USER chrome 브라우저에서 접속 시 이미지가 안보일 경우 하기 세팅을 수행 chrome://flags 설정 의 Insecure origins treated as secure Enable 후 http://{접속IP}:{접속Port} 추가 ","date":"2022-12-12T00:00:00Z","permalink":"https://muonkmu.github.io/p/%EC%9B%90%EA%B2%A9-%EA%B0%9C%EB%B0%9C-%EC%84%9C%EB%B2%84-%EA%B5%AC%EC%B6%95/","title":"원격 개발 서버 구축"}]